package main

import (
    "net"
    "fmt"
    "bufio"
    "strings"
    "strconv"
    "math/rand"
)

//Global variable for server side debugging
var debug bool

/// @Name: dumbReturnInt
/// @Desc: Returns the integer that you pass it.  This is to create a bad random number generator.  Returns as an int64
func dumbReturnInt(i int) int64 {
    return int64(i)
}

/// @Name: validateStrIntFromConn
/// @Desc: Makes sure that the string provided, when converted to an integer, is between 0 and 151, noninclusive.  The converted integer is returned if in the range.  If it is outside of the range, it returns 4444.
func validateStrIntFromConn(str string, c net.Conn) int {
    if i, err := strconv.Atoi(strings.TrimSpace(str)); err != nil {
        c.Write([]byte("That's not an integer.\n"))
        c.Close()
        return 4444
    } else if i >= 150 {
        c.Write([]byte("I said that there was a max of 150 (-_____-)\n"))
        return 4444
    } else if i <= 0 {
        c.Write([]byte("Come on.  I'm not that bad.  At least 1 plant grew.\n"))
        return 4444
    } else {
        return i
    }
}

/// @Name: handle
/// @Desc: Handles the connections and then run the ctf challenge.
func handle(conn net.Conn) {
    defer conn.Close()
    var inputNum int
    var num int
    clientID := conn.RemoteAddr //ID for the client is their IP address

    if debug {
        fmt.Print("Client connected:", clientID, "\n")
        defer fmt.Print("Connection closed:", clientID, "\n")
    }
    
    for {
        //Initial monologue for challenge
        conn.Write([]byte("Welcome to my garden.  Let's plant some seeds.\n"))
        conn.Write([]byte("I don't like an obnoxiously large garden.\n"))
        conn.Write([]byte("I think I'll have a max of 150 plants.\n"))
        conn.Write([]byte("How many seeds should we plant in our garden?\n"))
        conn.Write([]byte(">> "))
        message, err := bufio.NewReader(conn).ReadString('\n')
        
        //Check to see if there were no errors
        if err != nil {
            conn.Write([]byte("Error detected.  Closing connection.\n"))
            conn.Close()
            return
        }
        
        //Convert the supplied string from the connection to an integer, 
        //and kill things if it doesn't work
        if inputNum, err = strconv.Atoi(strings.TrimSpace(message)); err != nil || inputNum < 0{
            conn.Write([]byte("That's not a positive integer.\n"))
            conn.Close()
            return
        } else {
            if debug {
                fmt.Println("Message Received:", inputNum) 
            }
            break
        }

    }

    //Create random number generator and get a random number
    s1 := rand.NewSource(dumbReturnInt(inputNum))
    r1 := rand.New(s1)
    gen := r1.Intn(150)

    if debug {
        fmt.Println("Generated number:", gen)
    }

    //Ask for number from user
    conn.Write([]byte("Can you guess how many plants grew from our seeds?\n"))
    conn.Write([]byte(">> "))
    
    //Give them 3 chances to answer correctly
    for i := 0; i < 3; i++ {
        message, err := bufio.NewReader(conn).ReadString('\n')
        if err != nil {
            conn.Write([]byte("Error detected.  Closing connection.\n"))
            conn.Close()
        }

        if num = validateStrIntFromConn(message, conn); num != 4444 {
            if num == gen {
                conn.Write([]byte("ISTS-DUMB-RAND\n"))
                conn.Close()
            } else if i != 2 {//if it's not the last iteration
                conn.Write([]byte("No, silly.  Isn't it obvious?\n"))
            } else {
                conn.Write([]byte("I give up on you.\n"))
                conn.Close()
            }
            conn.Write([]byte("Let's try this again.  How many plants grew?\n"))
            conn.Write([]byte(">> "))
            continue
        }

    }
    return
}

func main() {
    debug = true
    if debug {
        fmt.Println("Launching server...")
    }

    server, _ := net.Listen("tcp", ":8081")

    //Accept every connection and start a goroutine for it.
    for {
        conn, _ := server.Accept()
        if conn != nil {
            go handle(conn)
        }
        conn = nil
    }
}
